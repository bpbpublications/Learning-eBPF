/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __CGROUP_SKB_BPF_SKEL_H__
#define __CGROUP_SKB_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct cgroup_skb_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rb;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *ingress_filter;
		struct bpf_program *egress_filter;
	} progs;
	struct {
		struct bpf_link *ingress_filter;
		struct bpf_link *egress_filter;
	} links;

#ifdef __cplusplus
	static inline struct cgroup_skb_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct cgroup_skb_bpf *open_and_load();
	static inline int load(struct cgroup_skb_bpf *skel);
	static inline int attach(struct cgroup_skb_bpf *skel);
	static inline void detach(struct cgroup_skb_bpf *skel);
	static inline void destroy(struct cgroup_skb_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
cgroup_skb_bpf__destroy(struct cgroup_skb_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
cgroup_skb_bpf__create_skeleton(struct cgroup_skb_bpf *obj);

static inline struct cgroup_skb_bpf *
cgroup_skb_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct cgroup_skb_bpf *obj;
	int err;

	obj = (struct cgroup_skb_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = cgroup_skb_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	cgroup_skb_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct cgroup_skb_bpf *
cgroup_skb_bpf__open(void)
{
	return cgroup_skb_bpf__open_opts(NULL);
}

static inline int
cgroup_skb_bpf__load(struct cgroup_skb_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct cgroup_skb_bpf *
cgroup_skb_bpf__open_and_load(void)
{
	struct cgroup_skb_bpf *obj;
	int err;

	obj = cgroup_skb_bpf__open();
	if (!obj)
		return NULL;
	err = cgroup_skb_bpf__load(obj);
	if (err) {
		cgroup_skb_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
cgroup_skb_bpf__attach(struct cgroup_skb_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
cgroup_skb_bpf__detach(struct cgroup_skb_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *cgroup_skb_bpf__elf_bytes(size_t *sz);

static inline int
cgroup_skb_bpf__create_skeleton(struct cgroup_skb_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "cgroup_skb_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "rb";
	s->maps[0].map = &obj->maps.rb;

	s->maps[1].name = "cgroup_s.rodata";
	s->maps[1].map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "ingress_filter";
	s->progs[0].prog = &obj->progs.ingress_filter;
	s->progs[0].link = &obj->links.ingress_filter;

	s->progs[1].name = "egress_filter";
	s->progs[1].prog = &obj->progs.egress_filter;
	s->progs[1].link = &obj->links.egress_filter;

	s->data = (void *)cgroup_skb_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *cgroup_skb_bpf__elf_bytes(size_t *sz)
{
	*sz = 5808;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xf0\x12\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0f\0\
\x01\0\xb7\x06\0\0\0\0\0\0\x61\x12\x10\0\0\0\0\0\x55\x02\x46\0\x08\0\0\0\x61\
\x18\x50\0\0\0\0\0\x61\x17\x4c\0\0\0\0\0\xbf\x71\0\0\0\0\0\0\x07\x01\0\0\x14\0\
\0\0\x2d\x81\x41\0\0\0\0\0\x61\x71\x0c\0\0\0\0\0\xbf\x12\0\0\0\0\0\0\x57\x02\0\
\0\xff\0\0\0\x7b\x2a\xc0\xff\0\0\0\0\x77\x01\0\0\x08\0\0\0\x57\x01\0\0\xff\0\0\
\0\x7b\x1a\xc8\xff\0\0\0\0\x61\x71\x0c\0\0\0\0\0\x77\x01\0\0\x10\0\0\0\x57\x01\
\0\0\xff\0\0\0\x7b\x1a\xd0\xff\0\0\0\0\x61\x71\x0c\0\0\0\0\0\x77\x01\0\0\x18\0\
\0\0\x7b\x1a\xd8\xff\0\0\0\0\x61\x71\x10\0\0\0\0\0\x57\x01\0\0\xff\0\0\0\x7b\
\x1a\xe0\xff\0\0\0\0\x61\x71\x10\0\0\0\0\0\x77\x01\0\0\x08\0\0\0\x57\x01\0\0\
\xff\0\0\0\x7b\x1a\xe8\xff\0\0\0\0\x61\x71\x10\0\0\0\0\0\x77\x01\0\0\x10\0\0\0\
\x57\x01\0\0\xff\0\0\0\x7b\x1a\xf0\xff\0\0\0\0\x61\x71\x10\0\0\0\0\0\x77\x01\0\
\0\x18\0\0\0\x7b\x1a\xf8\xff\0\0\0\0\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xc0\xff\
\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x29\0\0\0\xb7\x04\0\0\
\x40\0\0\0\x85\0\0\0\xb1\0\0\0\x61\x71\x0c\0\0\0\0\0\x55\x01\x1c\0\x08\x08\x08\
\x08\x71\x71\x09\0\0\0\0\0\xb7\x06\0\0\x01\0\0\0\x15\x01\x19\0\x01\0\0\0\x15\
\x01\x08\0\x11\0\0\0\xb7\x03\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x55\x01\x0d\0\x06\
\0\0\0\xb7\x06\0\0\0\0\0\0\xbf\x71\0\0\0\0\0\0\x07\x01\0\0\x28\0\0\0\x2d\x81\
\x11\0\0\0\0\0\x05\0\x04\0\0\0\0\0\xb7\x06\0\0\0\0\0\0\xbf\x71\0\0\0\0\0\0\x07\
\x01\0\0\x1c\0\0\0\x2d\x81\x0c\0\0\0\0\0\x69\x74\x16\0\0\0\0\0\xdc\x04\0\0\x10\
\0\0\0\x69\x73\x14\0\0\0\0\0\xdc\x03\0\0\x10\0\0\0\x15\x03\x02\0\x35\0\0\0\xb7\
\x06\0\0\0\0\0\0\x55\x04\x05\0\x35\0\0\0\x18\x01\0\0\x29\0\0\0\0\0\0\0\0\0\0\0\
\xb7\x02\0\0\x36\0\0\0\x85\0\0\0\x06\0\0\0\xb7\x06\0\0\x01\0\0\0\xbf\x60\0\0\0\
\0\0\0\x95\0\0\0\0\0\0\0\xb7\0\0\0\x01\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\
\x20\x42\x53\x44\x2f\x47\x50\x4c\0\x47\x50\x4c\0\x50\x61\x63\x6b\x65\x74\x20\
\x66\x72\x6f\x6d\x3a\x20\x25\x75\x2e\x25\x75\x2e\x25\x75\x2e\x25\x75\x20\x74\
\x6f\x3a\x20\x25\x75\x2e\x25\x75\x2e\x25\x75\x2e\x25\x75\0\x44\x4e\x53\x20\x50\
\x61\x63\x6b\x65\x74\x20\x28\x54\x43\x50\x2f\x55\x44\x50\x29\x20\x2d\x20\x53\
\x6f\x75\x72\x63\x65\x20\x50\x6f\x72\x74\x3a\x20\x25\x75\x2c\x20\x44\x65\x73\
\x74\x20\x50\x6f\x72\x74\x3a\x20\x25\x75\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\
\xeb\x01\0\x18\0\0\0\0\0\0\0\x58\x04\0\0\x58\x04\0\0\x30\x05\0\0\0\0\0\0\0\0\0\
\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\
\0\0\x02\0\0\0\x04\0\0\0\x1b\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\
\0\0\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\0\x04\
\0\0\0\0\0\x02\0\0\x04\x10\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\
\0\x40\0\0\0\x2a\0\0\0\0\0\0\x0e\x07\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\
\0\x2d\0\0\0\x20\0\0\x04\xb8\0\0\0\x37\0\0\0\x0b\0\0\0\0\0\0\0\x3b\0\0\0\x0b\0\
\0\0\x20\0\0\0\x44\0\0\0\x0b\0\0\0\x40\0\0\0\x49\0\0\0\x0b\0\0\0\x60\0\0\0\x57\
\0\0\0\x0b\0\0\0\x80\0\0\0\x60\0\0\0\x0b\0\0\0\xa0\0\0\0\x6d\0\0\0\x0b\0\0\0\
\xc0\0\0\0\x76\0\0\0\x0b\0\0\0\xe0\0\0\0\x81\0\0\0\x0b\0\0\0\0\x01\0\0\x8a\0\0\
\0\x0b\0\0\0\x20\x01\0\0\x9a\0\0\0\x0b\0\0\0\x40\x01\0\0\xa2\0\0\0\x0b\0\0\0\
\x60\x01\0\0\xab\0\0\0\x0d\0\0\0\x80\x01\0\0\xae\0\0\0\x0b\0\0\0\x20\x02\0\0\
\xb3\0\0\0\x0b\0\0\0\x40\x02\0\0\xbe\0\0\0\x0b\0\0\0\x60\x02\0\0\xc3\0\0\0\x0b\
\0\0\0\x80\x02\0\0\xcc\0\0\0\x0b\0\0\0\xa0\x02\0\0\xd4\0\0\0\x0b\0\0\0\xc0\x02\
\0\0\xdb\0\0\0\x0b\0\0\0\xe0\x02\0\0\xe6\0\0\0\x0b\0\0\0\0\x03\0\0\xf0\0\0\0\
\x0e\0\0\0\x20\x03\0\0\xfb\0\0\0\x0e\0\0\0\xa0\x03\0\0\x05\x01\0\0\x0b\0\0\0\
\x20\x04\0\0\x11\x01\0\0\x0b\0\0\0\x40\x04\0\0\x1c\x01\0\0\x0b\0\0\0\x60\x04\0\
\0\0\0\0\0\x0f\0\0\0\x80\x04\0\0\x26\x01\0\0\x11\0\0\0\xc0\x04\0\0\x2d\x01\0\0\
\x0b\0\0\0\0\x05\0\0\x36\x01\0\0\x0b\0\0\0\x20\x05\0\0\0\0\0\0\x13\0\0\0\x40\
\x05\0\0\x3f\x01\0\0\x0b\0\0\0\x80\x05\0\0\x48\x01\0\0\0\0\0\x08\x0c\0\0\0\x4e\
\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0b\0\0\0\x04\
\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0b\0\0\0\x04\0\0\0\x04\0\0\0\0\0\0\
\0\x01\0\0\x05\x08\0\0\0\x5b\x01\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x26\0\
\0\0\x65\x01\0\0\0\0\0\x08\x12\0\0\0\x6b\x01\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\
\0\0\0\0\x01\0\0\x05\x08\0\0\0\x7e\x01\0\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\
\x27\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x81\x01\0\0\x09\0\0\0\x85\x01\0\0\x01\
\0\0\x0c\x15\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x81\x01\0\0\x09\0\0\0\x92\x04\
\0\0\x01\0\0\x0c\x17\0\0\0\xc0\x04\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\
\0\0\0\x03\0\0\0\0\x19\0\0\0\x04\0\0\0\x0d\0\0\0\xc5\x04\0\0\0\0\0\x0e\x1a\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x19\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x1c\0\0\0\
\x04\0\0\0\x29\0\0\0\xcd\x04\0\0\0\0\0\x0e\x1d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\
\0\0\0\0\x1c\0\0\0\x04\0\0\0\x36\0\0\0\xe3\x04\0\0\0\0\0\x0e\x1f\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x03\0\0\0\0\x19\0\0\0\x04\0\0\0\x04\0\0\0\xfa\x04\0\0\0\0\0\x0e\
\x21\0\0\0\x01\0\0\0\x03\x05\0\0\x01\0\0\x0f\0\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\
\0\x09\x05\0\0\x02\0\0\x0f\0\0\0\0\x1e\0\0\0\0\0\0\0\x29\0\0\0\x20\0\0\0\x29\0\
\0\0\x36\0\0\0\x11\x05\0\0\x02\0\0\x0f\0\0\0\0\x1b\0\0\0\0\0\0\0\x0d\0\0\0\x22\
\0\0\0\0\0\0\0\x04\0\0\0\x19\x05\0\0\0\0\0\x07\0\0\0\0\x27\x05\0\0\0\0\0\x07\0\
\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\
\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\
\x65\x73\0\x72\x62\0\x5f\x5f\x73\x6b\x5f\x62\x75\x66\x66\0\x6c\x65\x6e\0\x70\
\x6b\x74\x5f\x74\x79\x70\x65\0\x6d\x61\x72\x6b\0\x71\x75\x65\x75\x65\x5f\x6d\
\x61\x70\x70\x69\x6e\x67\0\x70\x72\x6f\x74\x6f\x63\x6f\x6c\0\x76\x6c\x61\x6e\
\x5f\x70\x72\x65\x73\x65\x6e\x74\0\x76\x6c\x61\x6e\x5f\x74\x63\x69\0\x76\x6c\
\x61\x6e\x5f\x70\x72\x6f\x74\x6f\0\x70\x72\x69\x6f\x72\x69\x74\x79\0\x69\x6e\
\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x69\x66\x69\x6e\x64\x65\
\x78\0\x74\x63\x5f\x69\x6e\x64\x65\x78\0\x63\x62\0\x68\x61\x73\x68\0\x74\x63\
\x5f\x63\x6c\x61\x73\x73\x69\x64\0\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\
\x6e\x64\0\x6e\x61\x70\x69\x5f\x69\x64\0\x66\x61\x6d\x69\x6c\x79\0\x72\x65\x6d\
\x6f\x74\x65\x5f\x69\x70\x34\0\x6c\x6f\x63\x61\x6c\x5f\x69\x70\x34\0\x72\x65\
\x6d\x6f\x74\x65\x5f\x69\x70\x36\0\x6c\x6f\x63\x61\x6c\x5f\x69\x70\x36\0\x72\
\x65\x6d\x6f\x74\x65\x5f\x70\x6f\x72\x74\0\x6c\x6f\x63\x61\x6c\x5f\x70\x6f\x72\
\x74\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x74\x73\x74\x61\x6d\x70\0\x77\x69\
\x72\x65\x5f\x6c\x65\x6e\0\x67\x73\x6f\x5f\x73\x65\x67\x73\0\x67\x73\x6f\x5f\
\x73\x69\x7a\x65\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\
\x69\x6e\x74\0\x66\x6c\x6f\x77\x5f\x6b\x65\x79\x73\0\x5f\x5f\x75\x36\x34\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x73\x6b\
\0\x73\x6b\x62\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x66\x69\x6c\x74\x65\x72\0\x63\
\x67\x72\x6f\x75\x70\x5f\x73\x6b\x62\x2f\x69\x6e\x67\x72\x65\x73\x73\0\x2f\x68\
\x6f\x6d\x65\x2f\x62\x75\x69\x6c\x64\x2f\x50\x72\x6f\x6a\x65\x63\x74\x73\x2f\
\x65\x62\x70\x66\x2d\x62\x6f\x6f\x6b\x2d\x63\x6f\x64\x65\x2d\x65\x78\x61\x6d\
\x70\x6c\x65\x73\x2f\x63\x68\x30\x39\x2f\x42\x50\x46\x5f\x50\x52\x4f\x47\x5f\
\x54\x59\x50\x45\x5f\x43\x47\x52\x4f\x55\x50\x5f\x53\x4b\x42\x2f\x63\x67\x72\
\x6f\x75\x70\x5f\x73\x6b\x62\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x69\x6e\
\x67\x72\x65\x73\x73\x5f\x66\x69\x6c\x74\x65\x72\x28\x73\x74\x72\x75\x63\x74\
\x20\x5f\x5f\x73\x6b\x5f\x62\x75\x66\x66\x20\x2a\x73\x6b\x62\x29\0\x20\x20\x20\
\x20\x69\x66\x20\x28\x73\x6b\x62\x2d\x3e\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x20\
\x3d\x3d\x20\x68\x74\x6f\x6e\x73\x28\x45\x54\x48\x5f\x50\x5f\x49\x50\x29\x29\
\x20\x7b\0\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x20\x28\x64\x61\x74\x61\x20\
\x2b\x20\x73\x69\x7a\x65\x6f\x66\x28\x73\x74\x72\x75\x63\x74\x20\x69\x70\x68\
\x64\x72\x29\x20\x3e\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\x20\x7b\x20\x72\
\x65\x74\x75\x72\x6e\x20\x30\x3b\x20\x7d\0\x20\x20\x20\x20\x20\x20\x20\x20\x62\
\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x50\x61\x63\x6b\x65\x74\x20\x66\
\x72\x6f\x6d\x3a\x20\x25\x75\x2e\x25\x75\x2e\x25\x75\x2e\x25\x75\x20\x74\x6f\
\x3a\x20\x25\x75\x2e\x25\x75\x2e\x25\x75\x2e\x25\x75\x22\x2c\0\x20\x20\x20\x20\
\x20\x20\x20\x20\x69\x66\x28\x69\x70\x2d\x3e\x73\x61\x64\x64\x72\x20\x3d\x3d\
\x20\x41\x4c\x4c\x4f\x57\x45\x44\x5f\x49\x50\x29\x20\x7b\0\x20\x20\x20\x20\x20\
\x20\x20\x20\x20\x20\x20\x20\x69\x66\x28\x69\x70\x2d\x3e\x70\x72\x6f\x74\x6f\
\x63\x6f\x6c\x20\x3d\x3d\x20\x49\x50\x50\x52\x4f\x54\x4f\x5f\x49\x43\x4d\x50\
\x29\x20\x7b\0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
\x69\x66\x20\x28\x64\x61\x74\x61\x20\x2b\x20\x73\x69\x7a\x65\x6f\x66\x28\x73\
\x74\x72\x75\x63\x74\x20\x69\x70\x68\x64\x72\x29\x20\x2b\x20\x73\x69\x7a\x65\
\x6f\x66\x28\x73\x74\x72\x75\x63\x74\x20\x74\x63\x70\x68\x64\x72\x29\x20\x3e\
\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\
\x20\x30\x3b\x20\x7d\0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
\x20\x20\x69\x66\x20\x28\x64\x61\x74\x61\x20\x2b\x20\x73\x69\x7a\x65\x6f\x66\
\x28\x73\x74\x72\x75\x63\x74\x20\x69\x70\x68\x64\x72\x29\x20\x2b\x20\x73\x69\
\x7a\x65\x6f\x66\x28\x73\x74\x72\x75\x63\x74\x20\x75\x64\x70\x68\x64\x72\x29\
\x20\x3e\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\x20\x7b\x20\x72\x65\x74\x75\
\x72\x6e\x20\x30\x3b\x20\x7d\0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
\x69\x66\x20\x28\x73\x72\x63\x5f\x70\x6f\x72\x74\x20\x3d\x3d\x20\x35\x33\x20\
\x7c\x7c\x20\x64\x73\x74\x5f\x70\x6f\x72\x74\x20\x3d\x3d\x20\x35\x33\x29\x20\
\x7b\0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x62\x70\
\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x44\x4e\x53\x20\x50\x61\x63\x6b\x65\
\x74\x20\x28\x54\x43\x50\x2f\x55\x44\x50\x29\x20\x2d\x20\x53\x6f\x75\x72\x63\
\x65\x20\x50\x6f\x72\x74\x3a\x20\x25\x75\x2c\x20\x44\x65\x73\x74\x20\x50\x6f\
\x72\x74\x3a\x20\x25\x75\x22\x2c\x20\x73\x72\x63\x5f\x70\x6f\x72\x74\x2c\x20\
\x64\x73\x74\x5f\x70\x6f\x72\x74\x29\x3b\0\x7d\0\x65\x67\x72\x65\x73\x73\x5f\
\x66\x69\x6c\x74\x65\x72\0\x63\x67\x72\x6f\x75\x70\x5f\x73\x6b\x62\x2f\x65\x67\
\x72\x65\x73\x73\0\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\0\x63\
\x68\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x69\x6e\x67\x72\x65\x73\x73\x5f\
\x66\x69\x6c\x74\x65\x72\x2e\x5f\x5f\x5f\x66\x6d\x74\0\x69\x6e\x67\x72\x65\x73\
\x73\x5f\x66\x69\x6c\x74\x65\x72\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x6c\x69\
\x63\x65\x6e\x73\x65\0\x2e\x6d\x61\x70\x73\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\
\x69\x63\x65\x6e\x73\x65\0\x62\x70\x66\x5f\x66\x6c\x6f\x77\x5f\x6b\x65\x79\x73\
\0\x62\x70\x66\x5f\x73\x6f\x63\x6b\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x24\0\0\0\
\x24\0\0\0\x74\x01\0\0\x98\x01\0\0\0\0\0\0\x08\0\0\0\x94\x01\0\0\x01\0\0\0\0\0\
\0\0\x16\0\0\0\xa0\x04\0\0\x01\0\0\0\0\0\0\0\x18\0\0\0\x10\0\0\0\x94\x01\0\0\
\x15\0\0\0\0\0\0\0\xa7\x01\0\0\x03\x02\0\0\0\x9c\0\0\x08\0\0\0\xa7\x01\0\0\x2d\
\x02\0\0\x0e\xc0\0\0\x10\0\0\0\xa7\x01\0\0\x2d\x02\0\0\x09\xc0\0\0\x18\0\0\0\
\xa7\x01\0\0\0\0\0\0\0\0\0\0\x28\0\0\0\xa7\x01\0\0\x59\x02\0\0\x12\xc4\0\0\x38\
\0\0\0\xa7\x01\0\0\x59\x02\0\0\x0d\xc4\0\0\x40\0\0\0\xa7\x01\0\0\x9b\x02\0\0\
\x09\xcc\0\0\x28\x01\0\0\xa7\x01\0\0\0\0\0\0\0\0\0\0\x30\x01\0\0\xa7\x01\0\0\
\x9b\x02\0\0\x09\xcc\0\0\x58\x01\0\0\xa7\x01\0\0\xda\x02\0\0\x10\xe0\0\0\x60\
\x01\0\0\xa7\x01\0\0\xda\x02\0\0\x0c\xe0\0\0\x68\x01\0\0\xa7\x01\0\0\0\x03\0\0\
\x14\xe4\0\0\x78\x01\0\0\xa7\x01\0\0\0\x03\0\0\x10\xe4\0\0\xa8\x01\0\0\xa7\x01\
\0\0\x2f\x03\0\0\x31\xf4\0\0\xb8\x01\0\0\xa7\x01\0\0\x2f\x03\0\0\x15\xf4\0\0\
\xd0\x01\0\0\xa7\x01\0\0\x91\x03\0\0\x31\x08\x01\0\xe0\x01\0\0\xa7\x01\0\0\x91\
\x03\0\0\x15\x08\x01\0\xe8\x01\0\0\xa7\x01\0\0\0\0\0\0\0\0\0\0\x08\x02\0\0\xa7\
\x01\0\0\xf3\x03\0\0\x20\x20\x01\0\x20\x02\0\0\xa7\x01\0\0\x27\x04\0\0\x11\x24\
\x01\0\x48\x02\0\0\xa7\x01\0\0\x90\x04\0\0\x01\x98\x01\0\xa0\x04\0\0\x01\0\0\0\
\0\0\0\0\xa7\x01\0\0\xb2\x04\0\0\x05\xac\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe5\0\0\0\
\0\0\x03\0\x48\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2b\0\0\0\x01\0\x07\0\0\0\0\0\0\
\0\0\0\x29\0\0\0\0\0\0\0\xde\0\0\0\0\0\x03\0\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xd0\0\0\0\0\0\x03\0\x08\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd7\0\0\0\0\0\x03\0\
\xe8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xed\0\0\0\0\0\x03\0\x20\x02\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x14\0\0\0\x01\0\x07\0\x29\0\0\0\0\0\0\0\x36\0\0\0\0\0\0\0\0\0\0\
\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x70\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x58\x02\0\0\0\0\0\0\
\x7f\0\0\0\x12\0\x05\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xc8\0\0\0\x11\0\x06\0\
\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x9b\0\0\0\x11\0\x06\0\x0d\0\0\0\0\0\0\0\x04\
\0\0\0\0\0\0\0\xa4\0\0\0\x11\0\x08\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x30\x01\
\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x20\x02\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x08\
\x04\0\0\0\0\0\0\x04\0\0\0\x0f\0\0\0\x20\x04\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\
\x2c\x04\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x44\x04\0\0\0\0\0\0\x04\0\0\0\x0d\0\0\
\0\x50\x04\0\0\0\0\0\0\x04\0\0\0\x0e\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\
\0\x3c\0\0\0\0\0\0\0\x04\0\0\0\x09\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\
\x60\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\
\x80\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\
\xa0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\
\xc0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\
\xe0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xf0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\0\
\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x10\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\
\x20\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x30\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\
\0\x40\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\
\0\0\x60\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\x01\0\0\0\0\0\0\x04\0\0\0\x01\
\0\0\0\x80\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x90\x01\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xa8\x01\0\0\0\0\0\0\x04\0\0\0\x09\0\0\0\x15\x16\x17\x04\x09\x18\x19\
\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x69\
\x6e\x67\x72\x65\x73\x73\x5f\x66\x69\x6c\x74\x65\x72\x2e\x5f\x5f\x5f\x5f\x66\
\x6d\x74\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x66\x69\x6c\x74\x65\x72\x2e\x5f\x5f\
\x5f\x66\x6d\x74\0\x2e\x72\x65\x6c\x63\x67\x72\x6f\x75\x70\x5f\x73\x6b\x62\x2f\
\x69\x6e\x67\x72\x65\x73\x73\0\x63\x67\x72\x6f\x75\x70\x5f\x73\x6b\x62\x2f\x65\
\x67\x72\x65\x73\x73\0\x2e\x6d\x61\x70\x73\0\x69\x6e\x67\x72\x65\x73\x73\x5f\
\x66\x69\x6c\x74\x65\x72\0\x65\x67\x72\x65\x73\x73\x5f\x66\x69\x6c\x74\x65\x72\
\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x5f\x6c\x69\x63\x65\
\x6e\x73\x65\0\x72\x62\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\
\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\
\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x30\x5f\x39\0\x4c\x42\x42\x30\x5f\x38\0\x4c\
\x42\x42\x30\x5f\x37\0\x4c\x42\x42\x30\x5f\x31\x32\0\x4c\x42\x42\x30\x5f\x31\
\x31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa7\0\0\0\x03\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf7\x11\0\0\0\0\0\0\xf5\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x45\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x40\0\0\0\0\0\0\0\x58\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x41\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\x20\0\0\0\0\0\0\0\x0e\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\
\0\0\0\x58\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x02\0\0\0\0\0\
\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9c\0\0\
\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x02\0\0\0\0\0\0\x11\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\0\0\0\x01\0\0\0\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb9\x02\0\0\0\0\0\0\x5f\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6a\0\0\0\x01\0\0\0\x03\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x18\x03\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc3\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x28\x03\0\0\0\0\0\0\xa0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xbf\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x10\
\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x0e\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\
\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x0c\0\0\0\0\0\
\0\xb8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\
\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\x10\0\0\0\0\0\0\x80\x01\0\
\0\0\0\0\0\x0e\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x8d\0\0\0\
\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x11\0\0\0\0\0\0\x07\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xaf\0\0\0\x02\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x0e\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x01\
\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct cgroup_skb_bpf *cgroup_skb_bpf::open(const struct bpf_object_open_opts *opts) { return cgroup_skb_bpf__open_opts(opts); }
struct cgroup_skb_bpf *cgroup_skb_bpf::open_and_load() { return cgroup_skb_bpf__open_and_load(); }
int cgroup_skb_bpf::load(struct cgroup_skb_bpf *skel) { return cgroup_skb_bpf__load(skel); }
int cgroup_skb_bpf::attach(struct cgroup_skb_bpf *skel) { return cgroup_skb_bpf__attach(skel); }
void cgroup_skb_bpf::detach(struct cgroup_skb_bpf *skel) { cgroup_skb_bpf__detach(skel); }
void cgroup_skb_bpf::destroy(struct cgroup_skb_bpf *skel) { cgroup_skb_bpf__destroy(skel); }
const void *cgroup_skb_bpf::elf_bytes(size_t *sz) { return cgroup_skb_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
cgroup_skb_bpf__assert(struct cgroup_skb_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __CGROUP_SKB_BPF_SKEL_H__ */
