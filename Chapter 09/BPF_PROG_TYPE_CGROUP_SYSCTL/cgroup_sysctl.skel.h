/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __CGROUP_SYSCTL_BPF_SKEL_H__
#define __CGROUP_SYSCTL_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct cgroup_sysctl_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *sysctl_ip_forwarding;
	} progs;
	struct {
		struct bpf_link *sysctl_ip_forwarding;
	} links;

#ifdef __cplusplus
	static inline struct cgroup_sysctl_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct cgroup_sysctl_bpf *open_and_load();
	static inline int load(struct cgroup_sysctl_bpf *skel);
	static inline int attach(struct cgroup_sysctl_bpf *skel);
	static inline void detach(struct cgroup_sysctl_bpf *skel);
	static inline void destroy(struct cgroup_sysctl_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
cgroup_sysctl_bpf__destroy(struct cgroup_sysctl_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
cgroup_sysctl_bpf__create_skeleton(struct cgroup_sysctl_bpf *obj);

static inline struct cgroup_sysctl_bpf *
cgroup_sysctl_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct cgroup_sysctl_bpf *obj;
	int err;

	obj = (struct cgroup_sysctl_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = cgroup_sysctl_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	cgroup_sysctl_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct cgroup_sysctl_bpf *
cgroup_sysctl_bpf__open(void)
{
	return cgroup_sysctl_bpf__open_opts(NULL);
}

static inline int
cgroup_sysctl_bpf__load(struct cgroup_sysctl_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct cgroup_sysctl_bpf *
cgroup_sysctl_bpf__open_and_load(void)
{
	struct cgroup_sysctl_bpf *obj;
	int err;

	obj = cgroup_sysctl_bpf__open();
	if (!obj)
		return NULL;
	err = cgroup_sysctl_bpf__load(obj);
	if (err) {
		cgroup_sysctl_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
cgroup_sysctl_bpf__attach(struct cgroup_sysctl_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
cgroup_sysctl_bpf__detach(struct cgroup_sysctl_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *cgroup_sysctl_bpf__elf_bytes(size_t *sz);

static inline int
cgroup_sysctl_bpf__create_skeleton(struct cgroup_sysctl_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "cgroup_sysctl_bpf";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "sysctl_ip_forwarding";
	s->progs[0].prog = &obj->progs.sysctl_ip_forwarding;
	s->progs[0].link = &obj->links.sysctl_ip_forwarding;

	s->data = (void *)cgroup_sysctl_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *cgroup_sysctl_bpf__elf_bytes(size_t *sz)
{
	*sz = 2728;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xe8\x07\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0b\0\
\x01\0\xb7\x06\0\0\x01\0\0\0\x61\x12\0\0\0\0\0\0\x15\x02\x3a\0\0\0\0\0\xb7\x02\
\0\0\0\0\0\0\x7b\x2a\xf8\xff\0\0\0\0\x7b\x2a\xf0\xff\0\0\0\0\x7b\x2a\xe8\xff\0\
\0\0\0\x7b\x2a\xe0\xff\0\0\0\0\x7b\x2a\xd8\xff\0\0\0\0\x7b\x2a\xd0\xff\0\0\0\0\
\x7b\x2a\xc8\xff\0\0\0\0\x7b\x2a\xc0\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\
\0\xc0\xff\xff\xff\xb7\x03\0\0\x40\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x65\0\0\
\0\x18\x01\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\x5f\x10\0\0\0\0\0\0\x15\0\x01\0\0\0\0\
\0\x05\0\x26\0\0\0\0\0\x71\xa1\xc0\xff\0\0\0\0\x55\x01\x24\0\x6e\0\0\0\x71\xa1\
\xc1\xff\0\0\0\0\x55\x01\x22\0\x65\0\0\0\x71\xa1\xc2\xff\0\0\0\0\x55\x01\x20\0\
\x74\0\0\0\x71\xa1\xc3\xff\0\0\0\0\x55\x01\x1e\0\x2f\0\0\0\x71\xa1\xc4\xff\0\0\
\0\0\x55\x01\x1c\0\x69\0\0\0\x71\xa1\xc5\xff\0\0\0\0\x55\x01\x1a\0\x70\0\0\0\
\x71\xa1\xc6\xff\0\0\0\0\x55\x01\x18\0\x76\0\0\0\x71\xa1\xc7\xff\0\0\0\0\x55\
\x01\x16\0\x34\0\0\0\x71\xa1\xc8\xff\0\0\0\0\x55\x01\x14\0\x2f\0\0\0\x71\xa1\
\xc9\xff\0\0\0\0\x55\x01\x12\0\x69\0\0\0\x71\xa1\xca\xff\0\0\0\0\x55\x01\x10\0\
\x70\0\0\0\x71\xa1\xcb\xff\0\0\0\0\x55\x01\x0e\0\x5f\0\0\0\x71\xa1\xcc\xff\0\0\
\0\0\x55\x01\x0c\0\x66\0\0\0\x71\xa1\xcd\xff\0\0\0\0\x55\x01\x0a\0\x6f\0\0\0\
\x71\xa1\xce\xff\0\0\0\0\x55\x01\x08\0\x72\0\0\0\x71\xa1\xcf\xff\0\0\0\0\x55\
\x01\x06\0\x77\0\0\0\x71\xa1\xd0\xff\0\0\0\0\x55\x01\x04\0\x61\0\0\0\x71\xa1\
\xd1\xff\0\0\0\0\x55\x01\x02\0\x72\0\0\0\x71\xa1\xd2\xff\0\0\0\0\x15\x01\x01\0\
\x64\0\0\0\xb7\x06\0\0\0\0\0\0\xbf\x60\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\
\x4c\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xdc\0\0\0\xdc\0\0\0\xcb\x01\0\0\0\0\0\0\
\0\0\0\x02\x02\0\0\0\x01\0\0\0\x02\0\0\x04\x08\0\0\0\x0c\0\0\0\x03\0\0\0\0\0\0\
\0\x12\0\0\0\x03\0\0\0\x20\0\0\0\x1b\0\0\0\0\0\0\x08\x04\0\0\0\x21\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\x0d\x06\0\0\0\x2e\0\0\0\x01\0\0\0\x32\
\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x36\0\0\0\x01\0\0\x0c\x05\0\0\0\xa1\x01\
\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x08\0\0\0\x0a\0\
\0\0\x04\0\0\0\xa6\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\xba\x01\0\0\0\0\0\x0e\
\x09\0\0\0\x01\0\0\0\xc3\x01\0\0\x01\0\0\x0f\0\0\0\0\x0b\0\0\0\0\0\0\0\x04\0\0\
\0\0\x62\x70\x66\x5f\x73\x79\x73\x63\x74\x6c\0\x77\x72\x69\x74\x65\0\x66\x69\
\x6c\x65\x5f\x70\x6f\x73\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x69\x6e\x74\0\x73\x79\x73\x63\x74\x6c\x5f\
\x69\x70\x5f\x66\x6f\x72\x77\x61\x72\x64\x69\x6e\x67\0\x63\x67\x72\x6f\x75\x70\
\x2f\x73\x79\x73\x63\x74\x6c\0\x2f\x68\x6f\x6d\x65\x2f\x62\x75\x69\x6c\x64\x2f\
\x50\x72\x6f\x6a\x65\x63\x74\x73\x2f\x65\x62\x70\x66\x2d\x62\x6f\x6f\x6b\x2d\
\x63\x6f\x64\x65\x2d\x65\x78\x61\x6d\x70\x6c\x65\x73\x2f\x63\x68\x30\x39\x2f\
\x42\x50\x46\x5f\x50\x52\x4f\x47\x5f\x54\x59\x50\x45\x5f\x43\x47\x52\x4f\x55\
\x50\x5f\x53\x59\x53\x43\x54\x4c\x2f\x63\x67\x72\x6f\x75\x70\x5f\x73\x79\x73\
\x63\x74\x6c\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x73\x79\x73\x63\x74\x6c\
\x5f\x69\x70\x5f\x66\x6f\x72\x77\x61\x72\x64\x69\x6e\x67\x28\x73\x74\x72\x75\
\x63\x74\x20\x62\x70\x66\x5f\x73\x79\x73\x63\x74\x6c\x20\x2a\x63\x74\x78\x29\0\
\x20\x20\x20\x20\x69\x66\x20\x28\x63\x74\x78\x2d\x3e\x77\x72\x69\x74\x65\x29\
\x20\x7b\0\x20\x20\x20\x20\x6d\x65\x6d\x73\x65\x74\x28\x6e\x61\x6d\x65\x2c\x20\
\x30\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x6e\x61\x6d\x65\x29\x29\x3b\0\x20\x20\
\x20\x20\x72\x65\x74\x20\x3d\x20\x62\x70\x66\x5f\x73\x79\x73\x63\x74\x6c\x5f\
\x67\x65\x74\x5f\x6e\x61\x6d\x65\x28\x63\x74\x78\x2c\x20\x6e\x61\x6d\x65\x2c\
\x20\x73\x69\x7a\x65\x6f\x66\x28\x6e\x61\x6d\x65\x29\x2c\x20\x30\x29\x3b\0\x20\
\x20\x20\x20\x69\x66\x20\x28\x72\x65\x74\x20\x3c\x20\x30\x29\0\x20\x20\x20\x20\
\x20\x20\x20\x20\x69\x66\x20\x28\x6e\x61\x6d\x65\x5b\x69\x5d\x20\x21\x3d\x20\
\x69\x70\x5f\x66\x6f\x72\x77\x61\x72\x64\x69\x6e\x67\x5f\x6e\x61\x6d\x65\x5b\
\x69\x5d\x29\0\x7d\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\
\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x6c\
\x69\x63\x65\x6e\x73\x65\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\
\0\xbc\0\0\0\xd0\0\0\0\0\0\0\0\x08\0\0\0\x4b\0\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\
\x10\0\0\0\x4b\0\0\0\x0b\0\0\0\0\0\0\0\x59\0\0\0\xbb\0\0\0\0\x8c\0\0\x08\0\0\0\
\x59\0\0\0\xec\0\0\0\x0e\x94\0\0\x10\0\0\0\x59\0\0\0\xec\0\0\0\x09\x94\0\0\x20\
\0\0\0\x59\0\0\0\x02\x01\0\0\x05\x4c\0\0\x68\0\0\0\x59\0\0\0\0\0\0\0\0\0\0\0\
\x70\0\0\0\x59\0\0\0\x25\x01\0\0\x0b\x50\0\0\x98\0\0\0\x59\0\0\0\x60\x01\0\0\
\x0d\x54\0\0\xa0\0\0\0\x59\0\0\0\x60\x01\0\0\x09\x54\0\0\xb0\0\0\0\x59\0\0\0\
\x71\x01\0\0\x0d\x6c\0\0\xb8\0\0\0\x59\0\0\0\0\0\0\0\0\0\0\0\xe8\x01\0\0\x59\0\
\0\0\x9f\x01\0\0\x01\xbc\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6e\0\0\0\0\0\x03\0\
\xe8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x67\0\0\0\0\0\x03\0\xb0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x76\0\0\0\0\0\x03\0\xe0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\
\x12\0\x03\0\0\0\0\0\0\0\0\0\xf8\x01\0\0\0\0\0\0\x45\0\0\0\x11\0\x04\0\0\0\0\0\
\0\0\0\0\x04\0\0\0\0\0\0\0\xec\0\0\0\0\0\0\0\x04\0\0\0\x06\0\0\0\x2c\0\0\0\0\0\
\0\0\x04\0\0\0\x01\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xd0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xe0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x0e\x0f\0\x2e\x74\
\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x63\x67\x72\
\x6f\x75\x70\x2f\x73\x79\x73\x63\x74\x6c\0\x73\x79\x73\x63\x74\x6c\x5f\x69\x70\
\x5f\x66\x6f\x72\x77\x61\x72\x64\x69\x6e\x67\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\
\x64\x72\x73\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x73\x74\x72\x74\
\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\
\x42\x42\x30\x5f\x33\0\x4c\x42\x42\x30\x5f\x32\x33\0\x4c\x42\x42\x30\x5f\x32\
\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4e\0\0\0\x03\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6a\x07\0\0\0\0\0\0\x7e\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x40\0\0\0\0\0\0\0\xf8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x46\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x02\0\0\0\
\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x62\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3c\x02\0\0\0\0\0\0\xbf\x02\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5e\0\0\0\x09\0\0\
\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x06\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0a\
\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xfc\x04\0\0\0\0\0\0\xf0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xa8\x06\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x0a\0\0\0\x07\0\0\0\x08\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x37\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\
\0\0\0\0\0\x68\x07\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x56\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\
\x05\0\0\0\0\0\0\xa8\0\0\0\0\0\0\0\x01\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x18\0\
\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct cgroup_sysctl_bpf *cgroup_sysctl_bpf::open(const struct bpf_object_open_opts *opts) { return cgroup_sysctl_bpf__open_opts(opts); }
struct cgroup_sysctl_bpf *cgroup_sysctl_bpf::open_and_load() { return cgroup_sysctl_bpf__open_and_load(); }
int cgroup_sysctl_bpf::load(struct cgroup_sysctl_bpf *skel) { return cgroup_sysctl_bpf__load(skel); }
int cgroup_sysctl_bpf::attach(struct cgroup_sysctl_bpf *skel) { return cgroup_sysctl_bpf__attach(skel); }
void cgroup_sysctl_bpf::detach(struct cgroup_sysctl_bpf *skel) { cgroup_sysctl_bpf__detach(skel); }
void cgroup_sysctl_bpf::destroy(struct cgroup_sysctl_bpf *skel) { cgroup_sysctl_bpf__destroy(skel); }
const void *cgroup_sysctl_bpf::elf_bytes(size_t *sz) { return cgroup_sysctl_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
cgroup_sysctl_bpf__assert(struct cgroup_sysctl_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __CGROUP_SYSCTL_BPF_SKEL_H__ */
