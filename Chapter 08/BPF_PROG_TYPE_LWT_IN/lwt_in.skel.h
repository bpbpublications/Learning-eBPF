/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __LWT_IN_BPF_SKEL_H__
#define __LWT_IN_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct lwt_in_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *protocol_counts;
	} maps;
	struct {
		struct bpf_program *count_protocols;
	} progs;
	struct {
		struct bpf_link *count_protocols;
	} links;

#ifdef __cplusplus
	static inline struct lwt_in_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct lwt_in_bpf *open_and_load();
	static inline int load(struct lwt_in_bpf *skel);
	static inline int attach(struct lwt_in_bpf *skel);
	static inline void detach(struct lwt_in_bpf *skel);
	static inline void destroy(struct lwt_in_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
lwt_in_bpf__destroy(struct lwt_in_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
lwt_in_bpf__create_skeleton(struct lwt_in_bpf *obj);

static inline struct lwt_in_bpf *
lwt_in_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct lwt_in_bpf *obj;
	int err;

	obj = (struct lwt_in_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = lwt_in_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	lwt_in_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct lwt_in_bpf *
lwt_in_bpf__open(void)
{
	return lwt_in_bpf__open_opts(NULL);
}

static inline int
lwt_in_bpf__load(struct lwt_in_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct lwt_in_bpf *
lwt_in_bpf__open_and_load(void)
{
	struct lwt_in_bpf *obj;
	int err;

	obj = lwt_in_bpf__open();
	if (!obj)
		return NULL;
	err = lwt_in_bpf__load(obj);
	if (err) {
		lwt_in_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
lwt_in_bpf__attach(struct lwt_in_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
lwt_in_bpf__detach(struct lwt_in_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *lwt_in_bpf__elf_bytes(size_t *sz);

static inline int
lwt_in_bpf__create_skeleton(struct lwt_in_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "lwt_in_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "protocol_counts";
	s->maps[0].map = &obj->maps.protocol_counts;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "count_protocols";
	s->progs[0].prog = &obj->progs.count_protocols;
	s->progs[0].link = &obj->links.count_protocols;

	s->data = (void *)lwt_in_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *lwt_in_bpf__elf_bytes(size_t *sz)
{
	*sz = 3872;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xe0\x0b\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0d\0\
\x01\0\x61\x12\x10\0\0\0\0\0\x55\x02\x1b\0\x08\0\0\0\x61\x12\x50\0\0\0\0\0\x61\
\x11\x4c\0\0\0\0\0\xbf\x13\0\0\0\0\0\0\x07\x03\0\0\x22\0\0\0\x2d\x23\x16\0\0\0\
\0\0\x71\x11\x09\0\0\0\0\0\x73\x1a\xff\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\
\0\0\xff\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\
\x15\0\x04\0\0\0\0\0\x79\x01\0\0\0\0\0\0\x07\x01\0\0\x01\0\0\0\x7b\x10\0\0\0\0\
\0\0\x05\0\x0a\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x7b\x1a\xf0\xff\0\0\0\0\xbf\xa2\
\0\0\0\0\0\0\x07\x02\0\0\xff\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xf0\
\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\
\x02\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x47\x50\x4c\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\
\xc0\x03\0\0\xc0\x03\0\0\x6c\x03\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\
\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\
\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\
\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\x02\x08\0\0\
\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x01\0\0\0\0\0\0\x04\0\0\x04\
\x20\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x01\0\0\0\x40\0\0\0\x27\0\0\0\
\x05\0\0\0\x80\0\0\0\x32\0\0\0\x07\0\0\0\xc0\0\0\0\x3e\0\0\0\0\0\0\x0e\x09\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\x4e\0\0\0\x20\0\0\x04\xb8\0\0\0\x58\0\
\0\0\x0d\0\0\0\0\0\0\0\x5c\0\0\0\x0d\0\0\0\x20\0\0\0\x65\0\0\0\x0d\0\0\0\x40\0\
\0\0\x6a\0\0\0\x0d\0\0\0\x60\0\0\0\x78\0\0\0\x0d\0\0\0\x80\0\0\0\x81\0\0\0\x0d\
\0\0\0\xa0\0\0\0\x8e\0\0\0\x0d\0\0\0\xc0\0\0\0\x97\0\0\0\x0d\0\0\0\xe0\0\0\0\
\xa2\0\0\0\x0d\0\0\0\0\x01\0\0\xab\0\0\0\x0d\0\0\0\x20\x01\0\0\xbb\0\0\0\x0d\0\
\0\0\x40\x01\0\0\xc3\0\0\0\x0d\0\0\0\x60\x01\0\0\xcc\0\0\0\x0f\0\0\0\x80\x01\0\
\0\xcf\0\0\0\x0d\0\0\0\x20\x02\0\0\xd4\0\0\0\x0d\0\0\0\x40\x02\0\0\xdf\0\0\0\
\x0d\0\0\0\x60\x02\0\0\xe4\0\0\0\x0d\0\0\0\x80\x02\0\0\xed\0\0\0\x0d\0\0\0\xa0\
\x02\0\0\xf5\0\0\0\x0d\0\0\0\xc0\x02\0\0\xfc\0\0\0\x0d\0\0\0\xe0\x02\0\0\x07\
\x01\0\0\x0d\0\0\0\0\x03\0\0\x11\x01\0\0\x10\0\0\0\x20\x03\0\0\x1c\x01\0\0\x10\
\0\0\0\xa0\x03\0\0\x26\x01\0\0\x0d\0\0\0\x20\x04\0\0\x32\x01\0\0\x0d\0\0\0\x40\
\x04\0\0\x3d\x01\0\0\x0d\0\0\0\x60\x04\0\0\0\0\0\0\x11\0\0\0\x80\x04\0\0\x47\
\x01\0\0\x13\0\0\0\xc0\x04\0\0\x4e\x01\0\0\x0d\0\0\0\0\x05\0\0\x57\x01\0\0\x0d\
\0\0\0\x20\x05\0\0\0\0\0\0\x15\0\0\0\x40\x05\0\0\x60\x01\0\0\x0d\0\0\0\x80\x05\
\0\0\x69\x01\0\0\0\0\0\x08\x0e\0\0\0\x6f\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\
\0\0\0\0\0\0\0\x03\0\0\0\0\x0d\0\0\0\x04\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\x03\0\0\
\0\0\x0d\0\0\0\x04\0\0\0\x04\0\0\0\0\0\0\0\x01\0\0\x05\x08\0\0\0\x7c\x01\0\0\
\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x1e\0\0\0\x86\x01\0\0\0\0\0\x08\x14\0\0\0\
\x8c\x01\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x05\x08\0\0\0\x9f\
\x01\0\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x1f\0\0\0\0\0\0\0\x01\0\0\x0d\x02\
\0\0\0\xa2\x01\0\0\x0b\0\0\0\xa6\x01\0\0\x01\0\0\x0c\x17\0\0\0\x39\x03\0\0\0\0\
\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x19\0\0\0\x04\0\0\0\x04\
\0\0\0\x3e\x03\0\0\0\0\0\x0e\x1a\0\0\0\x01\0\0\0\x47\x03\0\0\x01\0\0\x0f\0\0\0\
\0\x0a\0\0\0\0\0\0\0\x20\0\0\0\x4d\x03\0\0\x01\0\0\x0f\0\0\0\0\x1b\0\0\0\0\0\0\
\0\x04\0\0\0\x55\x03\0\0\0\0\0\x07\0\0\0\0\x63\x03\0\0\0\0\0\x07\0\0\0\0\0\x69\
\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\
\x5f\x5f\0\x74\x79\x70\x65\0\x6b\x65\x79\x5f\x73\x69\x7a\x65\0\x76\x61\x6c\x75\
\x65\x5f\x73\x69\x7a\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x70\
\x72\x6f\x74\x6f\x63\x6f\x6c\x5f\x63\x6f\x75\x6e\x74\x73\0\x5f\x5f\x73\x6b\x5f\
\x62\x75\x66\x66\0\x6c\x65\x6e\0\x70\x6b\x74\x5f\x74\x79\x70\x65\0\x6d\x61\x72\
\x6b\0\x71\x75\x65\x75\x65\x5f\x6d\x61\x70\x70\x69\x6e\x67\0\x70\x72\x6f\x74\
\x6f\x63\x6f\x6c\0\x76\x6c\x61\x6e\x5f\x70\x72\x65\x73\x65\x6e\x74\0\x76\x6c\
\x61\x6e\x5f\x74\x63\x69\0\x76\x6c\x61\x6e\x5f\x70\x72\x6f\x74\x6f\0\x70\x72\
\x69\x6f\x72\x69\x74\x79\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\
\x65\x78\0\x69\x66\x69\x6e\x64\x65\x78\0\x74\x63\x5f\x69\x6e\x64\x65\x78\0\x63\
\x62\0\x68\x61\x73\x68\0\x74\x63\x5f\x63\x6c\x61\x73\x73\x69\x64\0\x64\x61\x74\
\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x6e\x61\x70\x69\x5f\x69\x64\0\x66\x61\
\x6d\x69\x6c\x79\0\x72\x65\x6d\x6f\x74\x65\x5f\x69\x70\x34\0\x6c\x6f\x63\x61\
\x6c\x5f\x69\x70\x34\0\x72\x65\x6d\x6f\x74\x65\x5f\x69\x70\x36\0\x6c\x6f\x63\
\x61\x6c\x5f\x69\x70\x36\0\x72\x65\x6d\x6f\x74\x65\x5f\x70\x6f\x72\x74\0\x6c\
\x6f\x63\x61\x6c\x5f\x70\x6f\x72\x74\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\
\x74\x73\x74\x61\x6d\x70\0\x77\x69\x72\x65\x5f\x6c\x65\x6e\0\x67\x73\x6f\x5f\
\x73\x65\x67\x73\0\x67\x73\x6f\x5f\x73\x69\x7a\x65\0\x5f\x5f\x75\x33\x32\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x66\x6c\x6f\x77\x5f\x6b\x65\x79\
\x73\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\
\x67\x20\x6c\x6f\x6e\x67\0\x73\x6b\0\x73\x6b\x62\0\x63\x6f\x75\x6e\x74\x5f\x70\
\x72\x6f\x74\x6f\x63\x6f\x6c\x73\0\x6c\x77\x74\x5f\x69\x6e\0\x2f\x68\x6f\x6d\
\x65\x2f\x62\x75\x69\x6c\x64\x2f\x50\x72\x6f\x6a\x65\x63\x74\x73\x2f\x66\x69\
\x6e\x61\x6c\x2d\x65\x62\x70\x66\x2d\x63\x6f\x64\x65\x2d\x65\x78\x61\x6d\x70\
\x6c\x65\x73\x2f\x63\x68\x30\x38\x2f\x42\x50\x46\x5f\x50\x52\x4f\x47\x5f\x54\
\x59\x50\x45\x5f\x4c\x57\x54\x5f\x49\x4e\x2f\x6c\x77\x74\x5f\x69\x6e\x2e\x62\
\x70\x66\x2e\x63\0\x20\x20\x69\x66\x20\x28\x73\x6b\x62\x2d\x3e\x70\x72\x6f\x74\
\x6f\x63\x6f\x6c\x20\x3d\x3d\x20\x5f\x5f\x62\x70\x66\x5f\x63\x6f\x6e\x73\x74\
\x61\x6e\x74\x5f\x68\x74\x6f\x6e\x73\x28\x45\x54\x48\x5f\x50\x5f\x49\x50\x29\
\x29\x20\x7b\0\x20\x20\x20\x20\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x20\x3d\x20\x69\
\x70\x68\x2d\x3e\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x3b\0\x20\x20\x5f\x5f\x75\x36\
\x34\x20\x2a\x63\x6f\x75\x6e\x74\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\
\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x70\x72\x6f\x74\x6f\x63\
\x6f\x6c\x5f\x63\x6f\x75\x6e\x74\x73\x2c\x20\x26\x70\x72\x6f\x74\x6f\x63\x6f\
\x6c\x29\x3b\0\x20\x20\x69\x66\x20\x28\x63\x6f\x75\x6e\x74\x29\x20\x7b\0\x20\
\x20\x20\x20\x28\x2a\x63\x6f\x75\x6e\x74\x29\x2b\x2b\x3b\0\x20\x20\x20\x20\x5f\
\x5f\x75\x36\x34\x20\x69\x6e\x69\x74\x69\x61\x6c\x5f\x63\x6f\x75\x6e\x74\x20\
\x3d\x20\x31\x3b\0\x20\x20\x20\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x75\x70\x64\
\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x5f\
\x63\x6f\x75\x6e\x74\x73\x2c\x20\x26\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x2c\x20\
\x26\x69\x6e\x69\x74\x69\x61\x6c\x5f\x63\x6f\x75\x6e\x74\x2c\x20\x42\x50\x46\
\x5f\x41\x4e\x59\x29\x3b\0\x7d\0\x63\x68\x61\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\
\x65\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x62\x70\x66\x5f\x66\
\x6c\x6f\x77\x5f\x6b\x65\x79\x73\0\x62\x70\x66\x5f\x73\x6f\x63\x6b\0\x9f\xeb\
\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\xcc\0\0\0\xe0\0\0\0\0\0\0\0\x08\0\
\0\0\xb6\x01\0\0\x01\0\0\0\0\0\0\0\x18\0\0\0\x10\0\0\0\xb6\x01\0\0\x0c\0\0\0\0\
\0\0\0\xbd\x01\0\0\x12\x02\0\0\x0c\x54\0\0\x08\0\0\0\xbd\x01\0\0\x12\x02\0\0\
\x07\x54\0\0\x38\0\0\0\xbd\x01\0\0\x4b\x02\0\0\x15\x68\0\0\x40\0\0\0\xbd\x01\0\
\0\x4b\x02\0\0\x0e\x68\0\0\x50\0\0\0\xbd\x01\0\0\0\0\0\0\0\0\0\0\x58\0\0\0\xbd\
\x01\0\0\x69\x02\0\0\x12\x7c\0\0\x70\0\0\0\xbd\x01\0\0\xac\x02\0\0\x07\x80\0\0\
\x78\0\0\0\xbd\x01\0\0\xbb\x02\0\0\x0d\x84\0\0\xa0\0\0\0\xbd\x01\0\0\xcb\x02\0\
\0\x0b\x8c\0\0\xb0\0\0\0\xbd\x01\0\0\0\0\0\0\0\0\0\0\xc8\0\0\0\xbd\x01\0\0\xe8\
\x02\0\0\x05\x90\0\0\xe8\0\0\0\xbd\x01\0\0\x37\x03\0\0\x01\x9c\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x75\0\0\0\0\0\x03\0\xe8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7c\0\0\0\0\0\
\x03\0\x98\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2a\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\
\xf8\0\0\0\0\0\0\0\x14\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x53\
\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x58\0\0\0\0\0\0\0\x01\0\0\
\0\x05\0\0\0\xc8\0\0\0\0\0\0\0\x01\0\0\0\x05\0\0\0\xa0\x03\0\0\0\0\0\0\x04\0\0\
\0\x05\0\0\0\xb8\x03\0\0\0\0\0\0\x04\0\0\0\x06\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\
\0\x01\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xe0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xf0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x0d\x0e\x0f\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\
\x2e\x65\x78\x74\0\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x5f\x63\x6f\x75\x6e\x74\x73\
\0\x2e\x6d\x61\x70\x73\0\x63\x6f\x75\x6e\x74\x5f\x70\x72\x6f\x74\x6f\x63\x6f\
\x6c\x73\0\x2e\x72\x65\x6c\x6c\x77\x74\x5f\x69\x6e\0\x2e\x6c\x6c\x76\x6d\x5f\
\x61\x64\x64\x72\x73\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x73\x74\
\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\
\x46\0\x4c\x42\x42\x30\x5f\x35\0\x4c\x42\x42\x30\x5f\x34\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5c\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x5b\x0b\0\0\0\0\0\0\x83\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x3e\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xf8\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3a\0\0\0\x09\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x0a\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\
\x0c\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x24\0\0\0\x01\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x01\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x54\0\0\0\x01\0\0\0\x03\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x58\x01\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x5c\x01\0\0\0\0\0\0\x44\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x6c\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\x0a\
\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x0c\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\
\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x08\0\0\0\0\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\
\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x0a\0\0\0\0\0\0\xd0\0\0\0\0\
\0\0\0\x0c\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x45\0\0\0\x03\
\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x58\x0b\0\0\0\0\0\0\x03\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x64\0\0\0\x02\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x09\0\0\0\0\0\0\xa8\0\0\0\0\0\0\0\x01\0\0\0\
\x04\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct lwt_in_bpf *lwt_in_bpf::open(const struct bpf_object_open_opts *opts) { return lwt_in_bpf__open_opts(opts); }
struct lwt_in_bpf *lwt_in_bpf::open_and_load() { return lwt_in_bpf__open_and_load(); }
int lwt_in_bpf::load(struct lwt_in_bpf *skel) { return lwt_in_bpf__load(skel); }
int lwt_in_bpf::attach(struct lwt_in_bpf *skel) { return lwt_in_bpf__attach(skel); }
void lwt_in_bpf::detach(struct lwt_in_bpf *skel) { lwt_in_bpf__detach(skel); }
void lwt_in_bpf::destroy(struct lwt_in_bpf *skel) { lwt_in_bpf__destroy(skel); }
const void *lwt_in_bpf::elf_bytes(size_t *sz) { return lwt_in_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
lwt_in_bpf__assert(struct lwt_in_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __LWT_IN_BPF_SKEL_H__ */
