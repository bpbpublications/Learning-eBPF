/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __SET_SOCKOPT_BPF_SKEL_H__
#define __SET_SOCKOPT_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct set_sockopt_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *setsockopt_handler;
	} progs;
	struct {
		struct bpf_link *setsockopt_handler;
	} links;

#ifdef __cplusplus
	static inline struct set_sockopt_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct set_sockopt_bpf *open_and_load();
	static inline int load(struct set_sockopt_bpf *skel);
	static inline int attach(struct set_sockopt_bpf *skel);
	static inline void detach(struct set_sockopt_bpf *skel);
	static inline void destroy(struct set_sockopt_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
set_sockopt_bpf__destroy(struct set_sockopt_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
set_sockopt_bpf__create_skeleton(struct set_sockopt_bpf *obj);

static inline struct set_sockopt_bpf *
set_sockopt_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct set_sockopt_bpf *obj;
	int err;

	obj = (struct set_sockopt_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = set_sockopt_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	set_sockopt_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct set_sockopt_bpf *
set_sockopt_bpf__open(void)
{
	return set_sockopt_bpf__open_opts(NULL);
}

static inline int
set_sockopt_bpf__load(struct set_sockopt_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct set_sockopt_bpf *
set_sockopt_bpf__open_and_load(void)
{
	struct set_sockopt_bpf *obj;
	int err;

	obj = set_sockopt_bpf__open();
	if (!obj)
		return NULL;
	err = set_sockopt_bpf__load(obj);
	if (err) {
		set_sockopt_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
set_sockopt_bpf__attach(struct set_sockopt_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
set_sockopt_bpf__detach(struct set_sockopt_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *set_sockopt_bpf__elf_bytes(size_t *sz);

static inline int
set_sockopt_bpf__create_skeleton(struct set_sockopt_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "set_sockopt_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "set_sock.rodata";
	s->maps[0].map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "setsockopt_handler";
	s->progs[0].prog = &obj->progs.setsockopt_handler;
	s->progs[0].link = &obj->links.setsockopt_handler;

	s->data = (void *)set_sockopt_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *set_sockopt_bpf__elf_bytes(size_t *sz)
{
	*sz = 3288;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x98\x09\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0d\0\
\x01\0\xbf\x16\0\0\0\0\0\0\x61\x64\x1c\0\0\0\0\0\x61\x63\x18\0\0\0\0\0\x18\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x29\0\0\0\x85\0\0\0\x06\0\0\0\x61\x61\
\x1c\0\0\0\0\0\x15\x01\x07\0\x01\0\0\0\xb7\x06\0\0\x01\0\0\0\x55\x01\x0a\0\x08\
\0\0\0\x18\x01\0\0\x29\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x25\0\0\0\x85\0\0\0\
\x06\0\0\0\x05\0\x05\0\0\0\0\0\x18\x01\0\0\x4e\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\
\0\x24\0\0\0\x85\0\0\0\x06\0\0\0\xb7\x06\0\0\0\0\0\0\xbf\x60\0\0\0\0\0\0\x95\0\
\0\0\0\0\0\0\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x20\x63\x61\x6c\x6c\x65\
\x64\x3a\x20\x6c\x65\x76\x65\x6c\x3d\x25\x64\x2c\x20\x6f\x70\x74\x6e\x61\x6d\
\x65\x3d\x25\x64\x0a\0\x41\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x53\x4f\x5f\x52\x43\
\x56\x42\x55\x46\x20\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x20\x63\x61\x6c\
\x6c\x2e\x0a\0\x42\x6c\x6f\x63\x6b\x69\x6e\x67\x20\x53\x4f\x5f\x44\x45\x42\x55\
\x47\x20\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x20\x63\x61\x6c\x6c\x2e\x0a\0\
\x47\x50\x4c\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x28\x02\0\0\x28\x02\0\0\x70\
\x02\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\x07\0\0\x04\x28\0\0\0\0\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x40\0\0\0\0\0\0\0\x07\0\0\0\x80\0\0\0\x0d\
\0\0\0\x08\0\0\0\xc0\0\0\0\x13\0\0\0\x08\0\0\0\xe0\0\0\0\x1b\0\0\0\x08\0\0\0\0\
\x01\0\0\x22\0\0\0\x08\0\0\0\x20\x01\0\0\0\0\0\0\x01\0\0\x05\x08\0\0\0\x29\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x19\0\0\0\0\0\0\0\x01\0\0\x05\x08\0\0\0\
\x2c\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\x01\0\0\x05\x08\
\0\0\0\x33\0\0\0\x06\0\0\0\0\0\0\0\x3e\0\0\0\0\0\0\x08\x09\0\0\0\x44\0\0\0\0\0\
\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\x01\0\0\x0d\x09\0\0\0\x48\0\0\0\x01\0\0\0\
\x4c\0\0\0\x01\0\0\x0c\x0a\0\0\0\0\0\0\0\0\0\0\x0a\x0d\0\0\0\xe1\x01\0\0\0\0\0\
\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x0c\0\0\0\x0f\0\0\0\x29\0\
\0\0\xe6\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\xfa\x01\0\0\0\0\0\x0e\x0e\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0c\0\0\0\x0f\0\0\0\x25\0\0\0\x15\x02\0\0\0\
\0\0\x0e\x11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0c\0\0\0\x0f\0\0\0\x24\0\
\0\0\x32\x02\0\0\0\0\0\x0e\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0d\0\0\
\0\x0f\0\0\0\x04\0\0\0\x4f\x02\0\0\0\0\0\x0e\x15\0\0\0\x01\0\0\0\x57\x02\0\0\
\x03\0\0\x0f\0\0\0\0\x10\0\0\0\0\0\0\0\x29\0\0\0\x12\0\0\0\x29\0\0\0\x25\0\0\0\
\x14\0\0\0\x4e\0\0\0\x24\0\0\0\x5f\x02\0\0\x01\0\0\x0f\0\0\0\0\x16\0\0\0\0\0\0\
\0\x04\0\0\0\x67\x02\0\0\0\0\0\x07\0\0\0\0\0\x62\x70\x66\x5f\x73\x6f\x63\x6b\
\x6f\x70\x74\0\x6c\x65\x76\x65\x6c\0\x6f\x70\x74\x6e\x61\x6d\x65\0\x6f\x70\x74\
\x6c\x65\x6e\0\x72\x65\x74\x76\x61\x6c\0\x73\x6b\0\x6f\x70\x74\x76\x61\x6c\0\
\x6f\x70\x74\x76\x61\x6c\x5f\x65\x6e\x64\0\x5f\x5f\x73\x33\x32\0\x69\x6e\x74\0\
\x63\x74\x78\0\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x5f\x68\x61\x6e\x64\x6c\
\x65\x72\0\x63\x67\x72\x6f\x75\x70\x2f\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\
\0\x2f\x68\x6f\x6d\x65\x2f\x62\x75\x69\x6c\x64\x2f\x50\x72\x6f\x6a\x65\x63\x74\
\x73\x2f\x66\x69\x6e\x61\x6c\x2d\x65\x62\x70\x66\x2d\x63\x6f\x64\x65\x2d\x65\
\x78\x61\x6d\x70\x6c\x65\x73\x2f\x63\x68\x30\x38\x2f\x42\x50\x46\x5f\x50\x52\
\x4f\x47\x5f\x54\x59\x50\x45\x5f\x43\x47\x52\x4f\x55\x50\x5f\x53\x4f\x43\x4b\
\x4f\x50\x54\x2f\x73\x65\x74\x5f\x73\x6f\x63\x6b\x6f\x70\x74\x2e\x62\x70\x66\
\x2e\x63\0\x69\x6e\x74\x20\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x5f\x68\x61\
\x6e\x64\x6c\x65\x72\x28\x73\x74\x72\x75\x63\x74\x20\x62\x70\x66\x5f\x73\x6f\
\x63\x6b\x6f\x70\x74\x20\x2a\x63\x74\x78\x29\x20\x7b\0\x20\x20\x62\x70\x66\x5f\
\x70\x72\x69\x6e\x74\x6b\x28\x22\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x20\
\x63\x61\x6c\x6c\x65\x64\x3a\x20\x6c\x65\x76\x65\x6c\x3d\x25\x64\x2c\x20\x6f\
\x70\x74\x6e\x61\x6d\x65\x3d\x25\x64\x5c\x6e\x22\x2c\x20\x63\x74\x78\x2d\x3e\
\x6c\x65\x76\x65\x6c\x2c\0\x20\x20\x69\x66\x20\x28\x63\x74\x78\x2d\x3e\x6f\x70\
\x74\x6e\x61\x6d\x65\x20\x3d\x3d\x20\x53\x4f\x5f\x52\x43\x56\x42\x55\x46\x29\
\x20\x7b\0\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x41\
\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x53\x4f\x5f\x52\x43\x56\x42\x55\x46\x20\x73\
\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x20\x63\x61\x6c\x6c\x2e\x5c\x6e\x22\x29\
\x3b\0\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x42\x6c\
\x6f\x63\x6b\x69\x6e\x67\x20\x53\x4f\x5f\x44\x45\x42\x55\x47\x20\x73\x65\x74\
\x73\x6f\x63\x6b\x6f\x70\x74\x20\x63\x61\x6c\x6c\x2e\x5c\x6e\x22\x29\x3b\0\x7d\
\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\
\x59\x50\x45\x5f\x5f\0\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x5f\x68\x61\x6e\
\x64\x6c\x65\x72\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x73\x65\x74\x73\x6f\x63\x6b\
\x6f\x70\x74\x5f\x68\x61\x6e\x64\x6c\x65\x72\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\
\x2e\x31\0\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x5f\x68\x61\x6e\x64\x6c\x65\
\x72\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x32\0\x4c\x49\x43\x45\x4e\x53\x45\0\
\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\x62\x70\x66\x5f\
\x73\x6f\x63\x6b\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x7c\0\0\
\0\x90\0\0\0\0\0\0\0\x08\0\0\0\x5f\0\0\0\x01\0\0\0\0\0\0\0\x0b\0\0\0\x10\0\0\0\
\x5f\0\0\0\x07\0\0\0\0\0\0\0\x71\0\0\0\xd3\0\0\0\0\x28\0\0\x08\0\0\0\x71\0\0\0\
\x05\x01\0\0\x03\x2c\0\0\x38\0\0\0\x71\0\0\0\x4b\x01\0\0\x0c\x3c\0\0\x40\0\0\0\
\x71\0\0\0\x4b\x01\0\0\x07\x3c\0\0\x58\0\0\0\x71\0\0\0\x6e\x01\0\0\x05\x40\0\0\
\x80\0\0\0\x71\0\0\0\xa7\x01\0\0\x05\x54\0\0\xa8\0\0\0\x71\0\0\0\xdf\x01\0\0\
\x01\x64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2a\0\0\0\x01\0\x05\0\0\0\0\0\0\0\0\0\x29\0\
\0\0\0\0\0\0\x9e\0\0\0\0\0\x03\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x97\0\0\0\0\
\0\x03\0\xa8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc2\0\0\0\x01\0\x05\0\x29\0\0\0\0\0\
\0\0\x25\0\0\0\0\0\0\0\xa5\0\0\0\x01\0\x05\0\x4e\0\0\0\0\0\0\0\x24\0\0\0\0\0\0\
\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x45\0\0\0\x12\0\x03\0\0\
\0\0\0\0\0\0\0\xb8\0\0\0\0\0\0\0\x8f\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x04\0\0\
\0\0\0\0\0\x18\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\x58\0\0\0\0\0\0\0\x01\0\0\0\
\x07\0\0\0\x80\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\xfc\x01\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x08\x02\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x14\x02\0\0\0\0\0\0\x03\0\0\
\0\x07\0\0\0\x2c\x02\0\0\0\0\0\0\x04\0\0\0\x09\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\
\0\x01\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x11\x03\x06\x07\x12\0\x2e\x74\
\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x72\x65\
\x6c\x63\x67\x72\x6f\x75\x70\x2f\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\0\x73\
\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x5f\x68\x61\x6e\x64\x6c\x65\x72\x2e\x5f\
\x5f\x5f\x5f\x66\x6d\x74\0\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x5f\x68\x61\
\x6e\x64\x6c\x65\x72\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\
\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\
\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\
\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x30\x5f\x34\0\x4c\x42\x42\x30\x5f\
\x33\0\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\x74\x5f\x68\x61\x6e\x64\x6c\x65\x72\
\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x32\0\x73\x65\x74\x73\x6f\x63\x6b\x6f\x70\
\x74\x5f\x68\x61\x6e\x64\x6c\x65\x72\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x31\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6e\0\0\0\x03\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb5\x08\0\0\0\0\0\0\xdf\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x40\0\0\0\0\0\0\0\xb8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x14\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x07\0\0\0\0\
\0\0\x30\0\0\0\0\0\0\0\x0c\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x7e\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\0\0\0\0\0\0\0\x72\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x66\0\0\0\x01\0\
\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6a\x01\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8a\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x70\x01\0\0\0\0\0\0\xb0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xf0\x07\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x0c\0\0\0\x07\0\0\0\x08\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x20\x06\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x07\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x08\0\0\0\
\0\0\0\x80\0\0\0\0\0\0\0\x0c\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x58\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xb0\x08\0\0\0\0\
\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x76\0\
\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x06\0\0\0\0\0\0\xf0\0\0\0\0\
\0\0\0\x01\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct set_sockopt_bpf *set_sockopt_bpf::open(const struct bpf_object_open_opts *opts) { return set_sockopt_bpf__open_opts(opts); }
struct set_sockopt_bpf *set_sockopt_bpf::open_and_load() { return set_sockopt_bpf__open_and_load(); }
int set_sockopt_bpf::load(struct set_sockopt_bpf *skel) { return set_sockopt_bpf__load(skel); }
int set_sockopt_bpf::attach(struct set_sockopt_bpf *skel) { return set_sockopt_bpf__attach(skel); }
void set_sockopt_bpf::detach(struct set_sockopt_bpf *skel) { set_sockopt_bpf__detach(skel); }
void set_sockopt_bpf::destroy(struct set_sockopt_bpf *skel) { set_sockopt_bpf__destroy(skel); }
const void *set_sockopt_bpf::elf_bytes(size_t *sz) { return set_sockopt_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
set_sockopt_bpf__assert(struct set_sockopt_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __SET_SOCKOPT_BPF_SKEL_H__ */
