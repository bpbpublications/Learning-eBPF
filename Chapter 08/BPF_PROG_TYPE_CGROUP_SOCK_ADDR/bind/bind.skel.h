/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __BIND_BPF_SKEL_H__
#define __BIND_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct bind_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *bind_v4_prog;
	} progs;
	struct {
		struct bpf_link *bind_v4_prog;
	} links;

#ifdef __cplusplus
	static inline struct bind_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct bind_bpf *open_and_load();
	static inline int load(struct bind_bpf *skel);
	static inline int attach(struct bind_bpf *skel);
	static inline void detach(struct bind_bpf *skel);
	static inline void destroy(struct bind_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
bind_bpf__destroy(struct bind_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
bind_bpf__create_skeleton(struct bind_bpf *obj);

static inline struct bind_bpf *
bind_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct bind_bpf *obj;
	int err;

	obj = (struct bind_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = bind_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	bind_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct bind_bpf *
bind_bpf__open(void)
{
	return bind_bpf__open_opts(NULL);
}

static inline int
bind_bpf__load(struct bind_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct bind_bpf *
bind_bpf__open_and_load(void)
{
	struct bind_bpf *obj;
	int err;

	obj = bind_bpf__open();
	if (!obj)
		return NULL;
	err = bind_bpf__load(obj);
	if (err) {
		bind_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
bind_bpf__attach(struct bind_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
bind_bpf__detach(struct bind_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *bind_bpf__elf_bytes(size_t *sz);

static inline int
bind_bpf__create_skeleton(struct bind_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "bind_bpf";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "bind_v4_prog";
	s->progs[0].prog = &obj->progs.bind_v4_prog;
	s->progs[0].link = &obj->links.bind_v4_prog;

	s->data = (void *)bind_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *bind_bpf__elf_bytes(size_t *sz)
{
	*sz = 2008;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x98\x05\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\xb7\0\0\0\0\0\0\0\x79\x12\x40\0\0\0\0\0\x15\x02\x06\0\0\0\0\0\x61\x22\
\x04\0\0\0\0\0\x55\x02\x04\0\x02\0\0\0\x61\x11\x20\0\0\0\0\0\xb7\0\0\0\x01\0\0\
\0\x15\x01\x01\0\x01\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x9f\xeb\x01\0\
\x18\0\0\0\0\0\0\0\x34\x01\0\0\x34\x01\0\0\xab\x01\0\0\0\0\0\0\0\0\0\x02\x02\0\
\0\0\x01\0\0\0\x0a\0\0\x04\x48\0\0\0\x0f\0\0\0\x03\0\0\0\0\0\0\0\x1b\0\0\0\x03\
\0\0\0\x20\0\0\0\x24\0\0\0\x05\0\0\0\x40\0\0\0\x2d\0\0\0\x03\0\0\0\xc0\0\0\0\
\x37\0\0\0\x03\0\0\0\xe0\0\0\0\x3e\0\0\0\x03\0\0\0\0\x01\0\0\x43\0\0\0\x03\0\0\
\0\x20\x01\0\0\x4c\0\0\0\x03\0\0\0\x40\x01\0\0\x58\0\0\0\x05\0\0\0\x60\x01\0\0\
\0\0\0\0\x07\0\0\0\0\x02\0\0\x64\0\0\0\0\0\0\x08\x04\0\0\0\x6a\0\0\0\0\0\0\x01\
\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x06\0\0\0\x04\0\0\0\
\x77\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\x05\x08\0\0\0\x8b\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\0\0\0\0\x01\0\0\x0d\x0a\0\0\0\
\x8e\0\0\0\x01\0\0\0\x92\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x96\0\0\0\x01\0\
\0\x0c\x09\0\0\0\xa2\x01\0\0\0\0\0\x07\0\0\0\0\0\x62\x70\x66\x5f\x73\x6f\x63\
\x6b\x5f\x61\x64\x64\x72\0\x75\x73\x65\x72\x5f\x66\x61\x6d\x69\x6c\x79\0\x75\
\x73\x65\x72\x5f\x69\x70\x34\0\x75\x73\x65\x72\x5f\x69\x70\x36\0\x75\x73\x65\
\x72\x5f\x70\x6f\x72\x74\0\x66\x61\x6d\x69\x6c\x79\0\x74\x79\x70\x65\0\x70\x72\
\x6f\x74\x6f\x63\x6f\x6c\0\x6d\x73\x67\x5f\x73\x72\x63\x5f\x69\x70\x34\0\x6d\
\x73\x67\x5f\x73\x72\x63\x5f\x69\x70\x36\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\
\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\
\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x73\x6b\0\x63\x74\x78\0\x69\x6e\x74\0\
\x62\x69\x6e\x64\x5f\x76\x34\x5f\x70\x72\x6f\x67\0\x63\x67\x72\x6f\x75\x70\x2f\
\x62\x69\x6e\x64\x34\0\x2f\x68\x6f\x6d\x65\x2f\x62\x75\x69\x6c\x64\x2f\x50\x72\
\x6f\x6a\x65\x63\x74\x73\x2f\x66\x69\x6e\x61\x6c\x2d\x65\x62\x70\x66\x2d\x63\
\x6f\x64\x65\x2d\x65\x78\x61\x6d\x70\x6c\x65\x73\x2f\x63\x68\x30\x38\x2f\x42\
\x50\x46\x5f\x50\x52\x4f\x47\x5f\x54\x59\x50\x45\x5f\x43\x47\x52\x4f\x55\x50\
\x5f\x53\x4f\x43\x4b\x5f\x41\x44\x44\x52\x2f\x62\x69\x6e\x64\x2f\x62\x69\x6e\
\x64\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x62\x69\x6e\x64\x5f\x76\x34\x5f\
\x70\x72\x6f\x67\x28\x73\x74\x72\x75\x63\x74\x20\x62\x70\x66\x5f\x73\x6f\x63\
\x6b\x5f\x61\x64\x64\x72\x20\x2a\x63\x74\x78\x29\x20\x7b\0\x20\x20\x20\x20\x73\
\x6b\x20\x3d\x20\x63\x74\x78\x2d\x3e\x73\x6b\x3b\0\x20\x20\x20\x20\x69\x66\x20\
\x28\x21\x73\x6b\x29\0\x20\x20\x20\x20\x69\x66\x20\x28\x73\x6b\x2d\x3e\x66\x61\
\x6d\x69\x6c\x79\x20\x21\x3d\x20\x41\x46\x5f\x49\x4e\x45\x54\x29\0\x20\x20\x20\
\x20\x69\x66\x20\x28\x63\x74\x78\x2d\x3e\x74\x79\x70\x65\x20\x21\x3d\x20\x53\
\x4f\x43\x4b\x5f\x53\x54\x52\x45\x41\x4d\x29\0\x7d\0\x62\x70\x66\x5f\x73\x6f\
\x63\x6b\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x8c\0\0\0\xa0\
\0\0\0\0\0\0\0\x08\0\0\0\xa3\0\0\0\x01\0\0\0\0\0\0\0\x0b\0\0\0\x10\0\0\0\xa3\0\
\0\0\x08\0\0\0\0\0\0\0\xb0\0\0\0\x12\x01\0\0\0\x20\0\0\x08\0\0\0\xb0\0\0\0\x40\
\x01\0\0\x0f\x2c\0\0\x10\0\0\0\xb0\0\0\0\x52\x01\0\0\x09\x30\0\0\x18\0\0\0\xb0\
\0\0\0\x5f\x01\0\0\x0d\x3c\0\0\x20\0\0\0\xb0\0\0\0\x5f\x01\0\0\x09\x3c\0\0\x28\
\0\0\0\xb0\0\0\0\x7e\x01\0\0\x0e\x48\0\0\x38\0\0\0\xb0\0\0\0\x7e\x01\0\0\x13\
\x48\0\0\x48\0\0\0\xb0\0\0\0\xa0\x01\0\0\x01\x58\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x51\
\0\0\0\0\0\x03\0\x48\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x12\0\x03\0\0\0\0\
\0\0\0\0\0\x50\0\0\0\0\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x40\0\0\0\0\
\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x60\0\0\0\0\0\
\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x80\0\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xa0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x0c\0\x2e\x74\x65\
\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x62\x69\x6e\x64\
\x5f\x76\x34\x5f\x70\x72\x6f\x67\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\
\x69\x67\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x42\
\x54\x46\0\x63\x67\x72\x6f\x75\x70\x2f\x62\x69\x6e\x64\x34\0\x4c\x42\x42\x30\
\x5f\x34\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2f\
\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x39\x05\0\0\0\0\0\0\x58\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\
\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x44\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x3f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x90\0\0\0\0\0\0\0\xf7\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x03\0\0\0\0\
\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\
\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x04\0\0\0\0\0\0\x90\0\0\0\
\0\0\0\0\x08\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x21\0\0\0\x03\
\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x38\x05\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x37\0\0\0\x02\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x04\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\x01\0\0\0\
\x03\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct bind_bpf *bind_bpf::open(const struct bpf_object_open_opts *opts) { return bind_bpf__open_opts(opts); }
struct bind_bpf *bind_bpf::open_and_load() { return bind_bpf__open_and_load(); }
int bind_bpf::load(struct bind_bpf *skel) { return bind_bpf__load(skel); }
int bind_bpf::attach(struct bind_bpf *skel) { return bind_bpf__attach(skel); }
void bind_bpf::detach(struct bind_bpf *skel) { bind_bpf__detach(skel); }
void bind_bpf::destroy(struct bind_bpf *skel) { bind_bpf__destroy(skel); }
const void *bind_bpf::elf_bytes(size_t *sz) { return bind_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
bind_bpf__assert(struct bind_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __BIND_BPF_SKEL_H__ */
